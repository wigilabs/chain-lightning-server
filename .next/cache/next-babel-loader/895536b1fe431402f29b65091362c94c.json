{"ast":null,"code":"import Cors from 'micro-cors';\nconst cors = Cors();\n\nconst superagent = require('superagent');\n\nconst handler = (req, res) => {\n  let events;\n  superagent.get('https://insights-api.newrelic.com/v1/accounts/2482859/query?nrql=SELECT+%60_raw%60%2C%60_sourcetype%60%2C%60source%60+FROM+splunkUpdateLogs%2C+splunkApacheAccess%2C+splunkApacheErrors%2C+splunkAuthLogs%2C+splunkHttp%2C+splunkKernel%2C+splunkSystemctl+WHERE+%60_raw%60+NOT+LIKE+%27%25CRON%25%27+LIMIT+6+').set('X-Query-Key', 'NRIQ-j7zJFckfarn9jsOB-nPscK5H6z0QCgHd').set('Accept', 'application/json').end((err, response) => {\n    events = JSON.parse(response.text).results[0].events;\n    let name1 = events[0]._sourcetype;\n    let eval1 = events[0]._raw;\n    let value1 = eval1.includes('not found or unable to stat') || eval1.includes('[:error]') || eval1.includes('deprecated');\n    let name2 = events[1]._sourcetype;\n    let eval2 = events[1]._raw;\n    let name3 = events[2]._sourcetype;\n    let eval3 = events[2]._raw;\n    let name4 = events[3]._sourcetype;\n    let eval4 = events[3]._raw;\n    let name5 = events[4]._sourcetype;\n    let eval5 = events[4]._raw;\n    let name6 = events[5]._sourcetype;\n    let eval6 = events[5]._raw;\n    console.log(\" => Events 1 : \", eval1);\n    console.log(\" => Events 2 : \", eval2);\n    console.log(\" => Events 3 : \", eval3);\n    console.log(\" => Events 4 : \", eval4);\n    console.log(\" => Events 5 : \", eval5);\n    console.log(\" => Events 6 : \", eval6);\n    let parsed = [{\n      name: name1,\n      value: value1,\n      msg: eval1\n    }, {\n      name: name2,\n      value: value2,\n      msg: eval2\n    }, {\n      name: name3,\n      value: value3,\n      msg: eval3\n    }, {\n      name: name4,\n      value: value4,\n      msg: eval4\n    }, {\n      name: name5,\n      value: value5,\n      msg: eval5\n    }, {\n      name: name6,\n      value: value6,\n      msg: eval6\n    }];\n    return res.json(events);\n  });\n};\n\nexport default cors(handler);","map":{"version":3,"sources":["C:/Users/fsoler/Desktop/chain-lightning-server/pages/api/splunk-events.js"],"names":["Cors","cors","superagent","require","handler","req","res","events","get","set","end","err","response","JSON","parse","text","results","name1","_sourcetype","eval1","_raw","value1","includes","name2","eval2","name3","eval3","name4","eval4","name5","eval5","name6","eval6","console","log","parsed","name","value","msg","value2","value3","value4","value5","value6","json"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AAEA,MAAMC,IAAI,GAAGD,IAAI,EAAjB;;AAEA,MAAME,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,MAAIC,MAAJ;AACAL,EAAAA,UAAU,CACPM,GADH,CACO,gTADP,EAEGC,GAFH,CAEO,aAFP,EAEsB,uCAFtB,EAGGA,GAHH,CAGO,QAHP,EAGiB,kBAHjB,EAIGC,GAJH,CAIO,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACtBL,IAAAA,MAAM,GAAGM,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACG,IAApB,EAA0BC,OAA1B,CAAkC,CAAlC,EAAqCT,MAA9C;AACA,QAAIU,KAAK,GAACV,MAAM,CAAC,CAAD,CAAN,CAAUW,WAApB;AACA,QAAIC,KAAK,GAACZ,MAAM,CAAC,CAAD,CAAN,CAAUa,IAApB;AACA,QAAIC,MAAM,GAACF,KAAK,CAACG,QAAN,CAAe,6BAAf,KAAiDH,KAAK,CAACG,QAAN,CAAe,UAAf,CAAjD,IAA+EH,KAAK,CAACG,QAAN,CAAe,YAAf,CAA1F;AACA,QAAIC,KAAK,GAAChB,MAAM,CAAC,CAAD,CAAN,CAAUW,WAApB;AACA,QAAIM,KAAK,GAACjB,MAAM,CAAC,CAAD,CAAN,CAAUa,IAApB;AACA,QAAIK,KAAK,GAAClB,MAAM,CAAC,CAAD,CAAN,CAAUW,WAApB;AACA,QAAIQ,KAAK,GAACnB,MAAM,CAAC,CAAD,CAAN,CAAUa,IAApB;AACA,QAAIO,KAAK,GAACpB,MAAM,CAAC,CAAD,CAAN,CAAUW,WAApB;AACA,QAAIU,KAAK,GAACrB,MAAM,CAAC,CAAD,CAAN,CAAUa,IAApB;AACA,QAAIS,KAAK,GAACtB,MAAM,CAAC,CAAD,CAAN,CAAUW,WAApB;AACA,QAAIY,KAAK,GAACvB,MAAM,CAAC,CAAD,CAAN,CAAUa,IAApB;AACA,QAAIW,KAAK,GAACxB,MAAM,CAAC,CAAD,CAAN,CAAUW,WAApB;AACA,QAAIc,KAAK,GAACzB,MAAM,CAAC,CAAD,CAAN,CAAUa,IAApB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bf,KAA/B;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BV,KAA/B;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BR,KAA/B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BN,KAA/B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,KAA/B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,KAA/B;AACA,QAAIG,MAAM,GAAG,CACX;AAAEC,MAAAA,IAAI,EAAEnB,KAAR;AAAkBoB,MAAAA,KAAK,EAAEhB,MAAzB;AAAqCiB,MAAAA,GAAG,EAAEnB;AAA1C,KADW,EAEX;AAAEiB,MAAAA,IAAI,EAAEb,KAAR;AAAkBc,MAAAA,KAAK,EAAEE,MAAzB;AAAqCD,MAAAA,GAAG,EAAEd;AAA1C,KAFW,EAGX;AAAEY,MAAAA,IAAI,EAAEX,KAAR;AAAkBY,MAAAA,KAAK,EAAEG,MAAzB;AAAqCF,MAAAA,GAAG,EAAEZ;AAA1C,KAHW,EAIX;AAAEU,MAAAA,IAAI,EAAET,KAAR;AAAkBU,MAAAA,KAAK,EAAEI,MAAzB;AAAqCH,MAAAA,GAAG,EAAEV;AAA1C,KAJW,EAKX;AAAEQ,MAAAA,IAAI,EAAEP,KAAR;AAAkBQ,MAAAA,KAAK,EAAEK,MAAzB;AAAqCJ,MAAAA,GAAG,EAAER;AAA1C,KALW,EAMX;AAAEM,MAAAA,IAAI,EAAEL,KAAR;AAAkBM,MAAAA,KAAK,EAAEM,MAAzB;AAAqCL,MAAAA,GAAG,EAAEN;AAA1C,KANW,CAAb;AAQA,WAAO1B,GAAG,CAACsC,IAAJ,CAASrC,MAAT,CAAP;AACD,GAlCH;AAmCD,CArCD;;AAuCA,eAAeN,IAAI,CAACG,OAAD,CAAnB","sourcesContent":["import Cors from 'micro-cors'\r\n\r\nconst cors = Cors()\r\n\r\nconst superagent = require('superagent');\r\nconst handler = (req, res) => {\r\n  let events\r\n  superagent\r\n    .get('https://insights-api.newrelic.com/v1/accounts/2482859/query?nrql=SELECT+%60_raw%60%2C%60_sourcetype%60%2C%60source%60+FROM+splunkUpdateLogs%2C+splunkApacheAccess%2C+splunkApacheErrors%2C+splunkAuthLogs%2C+splunkHttp%2C+splunkKernel%2C+splunkSystemctl+WHERE+%60_raw%60+NOT+LIKE+%27%25CRON%25%27+LIMIT+6+')\r\n    .set('X-Query-Key', 'NRIQ-j7zJFckfarn9jsOB-nPscK5H6z0QCgHd')\r\n    .set('Accept', 'application/json')\r\n    .end((err, response) => {\r\n      events = JSON.parse(response.text).results[0].events;\r\n      let name1=events[0]._sourcetype;\r\n      let eval1=events[0]._raw;\r\n      let value1=eval1.includes('not found or unable to stat') || eval1.includes('[:error]') || eval1.includes('deprecated')\r\n      let name2=events[1]._sourcetype;\r\n      let eval2=events[1]._raw;\r\n      let name3=events[2]._sourcetype;\r\n      let eval3=events[2]._raw;\r\n      let name4=events[3]._sourcetype;\r\n      let eval4=events[3]._raw;\r\n      let name5=events[4]._sourcetype;\r\n      let eval5=events[4]._raw;\r\n      let name6=events[5]._sourcetype;\r\n      let eval6=events[5]._raw;\r\n      console.log(\" => Events 1 : \", eval1);\r\n      console.log(\" => Events 2 : \", eval2);\r\n      console.log(\" => Events 3 : \", eval3);\r\n      console.log(\" => Events 4 : \", eval4);\r\n      console.log(\" => Events 5 : \", eval5);\r\n      console.log(\" => Events 6 : \", eval6);\r\n      let parsed = [\r\n        { name: name1,    value: value1,     msg: eval1 },\r\n        { name: name2,    value: value2,     msg: eval2 },\r\n        { name: name3,    value: value3,     msg: eval3 },\r\n        { name: name4,    value: value4,     msg: eval4 },\r\n        { name: name5,    value: value5,     msg: eval5 },\r\n        { name: name6,    value: value6,     msg: eval6 }\r\n      ]\r\n      return res.json(events);\r\n    });\r\n};\r\n\r\nexport default cors(handler);\r\n"]},"metadata":{},"sourceType":"module"}